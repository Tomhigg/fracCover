% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/percent_cover_parallel.R, R/percent_cover_parallel_fortest.R
\name{percent_cover_parallel}
\alias{percent_cover_parallel}
\title{Percentage Cover Calculations-Full Function
This script reads training data from the CSV file created using the "rf_csv"
script.  The script then uses the X and Y coordinates from the training data file to select
the pixel values (predictor values) for each sample point in the input image. The predictor
values and the percent cover data from the training data file (response variable) are
combined and used as input to the random forests model. After the model is created percent
cover predictions are made on the input image to create an output image with percent cover
values ranging from 0 to 1.}
\usage{
percent_cover_parallel(no_cores, inImage, pointdata, outImage, LS.no.data,
  point_CRS)

percent_cover_parallel(no_cores, inImage, pointdata, outImage, LS.no.data,
  point_CRS)
}
\arguments{
\item{no_cores}{number of cores to implement on}

\item{pointdata}{Data frame of training data from the rf_csv function, does not need to be projected}

\item{LS.no.data}{No data value for the Landsat image, normally 0}

\item{point_CRS}{a CRS object for the training data}

\item{LS.stack}{A stack of Landsat data, ideally generated by the team LUCC package}

\item{outImage.}{Name and path for the output classified image}

\item{no_cores}{number of cores to implement on}

\item{pointdata}{Data frame of training data from the rf_csv function, does not need to be projected}

\item{LS.stack}{A stack of Landsat data, ideally generated by the team LUCC package}

\item{LS.no.data}{No data value for the Landsat image, normally 0}

\item{outImage.}{Name and path for the output classified image}

\item{point_CRS}{a CRS object for the training data}
}
\value{
a raster images classified into percentage coverage

a raster images classified into percentage coverage
}
\description{
Percentage Cover Calculations-Full Function
This script reads training data from the CSV file created using the "rf_csv"
script.  The script then uses the X and Y coordinates from the training data file to select
the pixel values (predictor values) for each sample point in the input image. The predictor
values and the percent cover data from the training data file (response variable) are
combined and used as input to the random forests model. After the model is created percent
cover predictions are made on the input image to create an output image with percent cover
values ranging from 0 to 1.

Percentage Cover Calculations-Full Function
This script reads training data from the CSV file created using the "rf_csv"
script.  The script then uses the X and Y coordinates from the training data file to select
the pixel values (predictor values) for each sample point in the input image. The predictor
values and the percent cover data from the training data file (response variable) are
combined and used as input to the random forests model. After the model is created percent
cover predictions are made on the input image to create an output image with percent cover
values ranging from 0 to 1.
This version does not writeraster to allow use in the sample size test functions
}

